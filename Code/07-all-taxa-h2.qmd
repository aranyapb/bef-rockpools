---
title: "All taxa: Hypothesis 2"
format: 
  html:
    embed-resources: true
html-math-method: 
  method: katex
editor: source
execute:
  warning: false
---

```{r}
# prepare the environment
taxa = "all"
source(here::here("Code/prep-env.R"))
```

Here, we test hypothesis 2 (**H2**) on data from all taxa:

*However, BEF relationships based on alpha diversity as the predictor variable (alpha BEF relationship) should not necessarily be positive since functioning may be supported locally by one or a few well adapted species. As a result, we expect that (Hypothesis 2) the link between local diversity in individual rock pools and community biomass (i.e., alpha BEF relationship) will be variable across inselbergs.*

### Causal hypothesis

We used a Directed Acyclic graph (DAG) to represent our hypothesised causal model of the relationships among alpha diversity, pool depth and community biomass on different inselbergs:

```{r}
# specify the causal hypothesis via a dag

# create the model using dagitty
dag_h2a <- get_dag_h2a()

# plot the model
plot(dag_h2a)
```

Given the simplicity of this model, there are no conditional independencies that can be assessed that could provide an indication of whether the data are consistent with the DAG:

```{r}
# check the implied conditional independencies
impliedConditionalIndependencies(dag_h2a)
```

However, this causal structure is straightforward and uncontroversial. We would not expect pool alpha diversity or biomass to causally affect depth or inselberg and, give the hypothesis, it makes sense to model alpha affecting biomass (although a two-way relationship is often discussed, e.g. Grace et al. 2016).

### Statistical analysis

#### Backdoor criterion

Based on the DAG (i.e. dag_h1b), to isolate the direct effect of alpha diversity on pool biomass requires adjusting for pool depth and inselberg via the backdoor criterion (Pearl 2009).

```{r}
# adjustment set: Depth, Inselberg
adjustmentSets(x = dag_h2a, exposure = "Alpha", outcome = "Biomass", effect = "direct")
```

#### Variable standardisation

The pool biomass, pool depth and alpha diversity variables were all log-transformed (see *Exploratory Data Analysis*) to improve distributions of the variables for linear modelling. These variables were z-score transformed:

```{r}
# h2_dat
h2_dat <-
  dat |>
  dplyr::select(logbiomass, logalpha, logdepth, inselberg) |>
  dplyr::mutate(logbiomass = scale(logbiomass)[, 1],
                logalpha = scale(logalpha)[, 1],
                logdepth = scale(logdepth)[, 1])
```

#### Model fitting

For this hypothesis, we are most interested in how alpha diversity affects pool biomass within each inselberg and how this relationship varies across inselbergs. As a result, our strategy for testing this hypothesis was as follows. First, fit a model where the slope between log-transformed alpha diversity and log-transformed pool biomass is constant across inselbergs but where the intercept varies across inselbergs (model 1):

+ `logbiomass ~ logalpha + logdepth + (1 | inselberg)`

Then, fit a second model where the slope between log-transformed alpha diversity and log-transformed pool biomass can vary across inselbergs (via a random slope) (model 2):

+ `logbiomass ~ logalpha + logdepth + (1 + logalpha | inselberg)`

Finally, compare these models using a likelihood ratio test based on the $\chi^2$ distribution. If the model with the varying slopes fits (i.e. model 2) the data significantly better than the model without varying slopes (i.e. model 1), this would support our hypothesis.

To fit the model, we used the *lme4* package to fit linear mixed-models to estimate the total effect of gamma diversity (log-transformed) on biomass (log-transformed):

##### Model 1

```{r}
# fit the linear mixed model
lm1 <- lmer(logbiomass ~ logalpha + logdepth + (1 | inselberg), 
            data = h2_dat,
            REML = FALSE)
```

We then examined the fit of the model to the data along with the model assumptions via a graphical analysis of the residuals.

###### Assess model fit

To assess model fit, we plotted the observed values (y-axis) versus the modeled expectations (x-axis):

```{r}
# plot the model fit
plot(predict(lm1), h2_dat$logbiomass, 
     xlab = "Predicted E(log(biomass)) (mg)", ylab = "Observed log(biomass) (mg)")
abline(0, 1)
```

```{r}
# check the rsquared value
piecewiseSEM::rsquared(lm1)
```

##### Checking model assumptions

```{r}
# check assumptions using DHARMa

# simulate residuals
lm1_res <- simulateResiduals(fittedModel = lm1, n = 2000)

# qq plot residuals
plotQQunif(lm1_res)
```

```{r}
# residuals versus predicted values
plotResiduals(lm1_res)
```

```{r}
# test for overdispersion
testDispersion(lm1_res)
```

##### Model 2

```{r}
# fit the linear mixed model
lm2 <- lmer(logbiomass ~ logalpha + logdepth + (1 + logalpha | inselberg), 
            data = h2_dat,
            REML = FALSE)
```

We then examined the fit of the model to the data along with the model assumptions via a graphical analysis of the residuals.

###### Assess model fit

To assess model fit, we plotted the observed values (y-axis) versus the modeled expectations (x-axis):

```{r}
# plot the model fit
plot(predict(lm2), h2_dat$logbiomass, 
     xlab = "Predicted E(log(biomass)) (mg)", ylab = "Observed log(biomass) (mg)")
abline(0, 1)
```

```{r}
# check the rsquared value
piecewiseSEM::rsquared(lm2)
```

##### Checking model assumptions

```{r}
# check assumptions using DHARMa

# simulate residuals
lm2_res <- simulateResiduals(fittedModel = lm2, n = 2000)

# qq plot residuals
plotQQunif(lm2_res)
```

```{r}
# residuals versus predicted values
plotResiduals(lm2_res)
```

```{r}
# test for overdispersion
testDispersion(lm2_res)
```

##### Hypothesis testing

To test the hypothesis, we compared **Model 1** to **Model 2** using a likelihood ratio test using the `anova` function:

```{r}
# hypothesis test
anova(lm1, lm2)
```

These likelihood ratio tests showed that only the log-transformed pool depth significantly affected the log-transformed. Therefore, there was no effect of log-transformed gamma diversity on log-transformed biomass.

##### Path coefficients

Our main hypothesis test (i.e. the effect on log-transformed gamma diversity on log-transformed biomass) was tested using the likelihood ratio test (see previous section). However, we also wanted to estimate the path coefficients associated with the DAG (i.e. dag_h1b). For this, we need a series of models.

###### Response: Biomass

The model that we fit (lm1) is sufficient to estimate the direct effects of log-transformed gamma diversity, log-transformed depth, PC1 and PC2 on biomass. This is shown if we set all four variables as exposures in the *adjustmentSets* function and no variable are returned. This implies that all relevant variables for estimating these direct effects are included based on the DAG:

```{r}
# check the adjustment sets
adjustmentSets(x = dag_h1b, 
               exposure = c("PC1", "Gamma", "Depth", "PC2"), 
               outcome = "Biomass", 
               effect = "direct")
```

Based on this model, we can then make a table of the relevant path coefficients:

```{r}
# show table with relevant paths
resp_logbiomass <- 
  extract_predictor_paths(predictors = c("loggamma", "logdepth", "pc1", "pc2"), 
                          response = "logbiomass", 
                          model = lm1)

# view the table
resp_logbiomass
```

###### Response: Depth

To estimate the path from PC2 to log-transformed pool depth, no adjustment sets are necessary:

```{r}
# check the adjustment sets
adjustmentSets(x = dag_h1b, 
               exposure = c("PC1"), 
               outcome = "Depth", 
               effect = "direct")
```

```{r}
# fit the linear mixed model
lm2 <- lmer(logdepth ~ pc2 + (1 | inselberg), data = h1_dat)
```

```{r}
# show table with relevant paths
resp_logdepth <- 
  extract_predictor_paths(predictors = c("pc2"), 
                          response = "logdepth", 
                          model = lm2)

# view the table
resp_logdepth
```

###### Response: Gamma

To estimate the paths going from log-transformed pool depth, PC1 and PC2 to log-transformed gamma diversity, we need a model with log-transformed gamma diversity and these three variables as predictor variables. It is not necessary to include log-transformed biomass.

```{r}
# check the adjustment sets
adjustmentSets(x = dag_h1b, 
               exposure = c("PC1", "PC2", "Depth"), 
               outcome = "Gamma", 
               effect = "direct")
```

```{r}
# fit the linear mixed model
lm3 <- lmer(loggamma ~ logdepth + pc1 + pc2 + (1 | inselberg), data = h1_dat)
```

```{r}
# show table with relevant paths
resp_loggamma <- 
  extract_predictor_paths(predictors = c("logdepth", "pc1" ,"pc2"), 
                          response = "loggamma", 
                          model = lm3)

# view the table
resp_loggamma
```

Therefore, the relevant path coefficients associated with dag_h1b are summarised here:

```{r}
# bind the tables together
dplyr::bind_rows(resp_logbiomass,
                 resp_loggamma,
                 resp_logdepth)
```


#### Data visualisation

We plotted the model predictions for the effect log-transformed gamma diversity on log-transformed pool biomass while holding PC1, pc1 and log-transformed pool depth at their mean values:

```{r}
# plot fig 5

# get model predictions
lm1_pred <-
  predict_lmer_with_intervals_merTools(model = lm1, 
                                       data = h1_dat, 
                                       predictors = c("loggamma", "pc1", "pc2", "logdepth"),
                                       vary = "loggamma", 
                                       n_points = 100, nsim = 1000,
                                       include_re = FALSE,
                                       group_levels = NULL,
                                       seed = 123)

# plot the data with the model predictions
p1 <- 
  cond_eff_plot(data_raw = h1_dat, data_pred = lm1_pred, 
                x_var = "loggamma", y_var = "logbiomass", 
                xlab = gamma_div, ylab = ln_biomass, size_var = "gamma_se",
                taxa = taxa, labels = c("a", "b", "c") )
p1

# save the figure as a .rds file
saveRDS(object = p1[[1]], file = paste0("Figures/fig_5", p1[[2]], ".rds"))
```


